initSidebarItems({"fn":[["exit_code","Get the exit code of the message being processed."],["id","Obtain an identifier of the message currently being processed."],["load","`load` returns Result, where Ok case contains a message payload decoded into the struct of specified type, or as a generic argument. In case of Err, contains a decoding error ContractError::Decode. For decode-related errors (https://docs.rs/parity-scale-codec/2.3.1/parity_scale_codec/struct.Error.html), Gear returns the native one after decode."],["load_bytes","Get a payload of the message currently being processed."],["reply",""],["reply_bytes","Send a new message as a reply to the message currently being processed."],["reply_commit","Finalize and send a current reply message."],["reply_push","Push a payload part to the current reply message."],["reply_to","Get an identifier of the initial message which the current handle_reply function is called on."],["send",""],["send_and_wait_for_reply","Send a message and wait for reply."],["send_bytes","Send a new message to the program or user."],["send_bytes_and_wait_for_reply","Send a message and wait for reply."],["send_bytes_with_gas","Send a new message to the program or user."],["send_commit","Finalize and send message formed in parts."],["send_commit_with_gas","Finalize and send message formed in parts, with gas_limit."],["send_init","Initialize a message to send, formed in parts."],["send_push","Push a payload part of the message to be sent in parts."],["send_with_gas",""],["size","Get the payload size of the message being processed."],["source","Get the identifier of the message source (256-bit address)."],["value","Get the value associated with the message being processed."]],"struct":[["CodecMessageFuture","To interrupt a program execution waiting for a reply on a previous message, one needs to call an `.await` expression. The initial message that requires a reply is sent instantly. Function `send_and_wait_for_reply` returns `CodecMessageFuture` which implements `Future` trait. Program interrupts until the reply is received. As soon as the reply is received, the function checks it’s exit code and returns `Ok()` with decoded structure inside or `Err()` in case of exit code does not equal 0. For decode-related errors (https://docs.rs/parity-scale-codec/2.3.1/parity_scale_codec/struct.Error.html), Gear returns the native one after decode."],["MessageFuture","To interrupt a program execution waiting for a reply on a previous message, one needs to call an `.await` expression. The initial message that requires a reply is sent instantly. Function `send_bytes_and_wait_for_reply` returns `MessageFuture` which implements `Future` trait. Program interrupts until the reply is received. As soon as the reply is received, the function checks it’s exit code and returns `Ok()` with raw bytes inside or `Err()` in case of exit code does not equal 0. For decode-related errors (https://docs.rs/parity-scale-codec/2.3.1/parity_scale_codec/struct.Error.html), Gear returns the native one after decode."],["MessageHandle","Message handle."]]});